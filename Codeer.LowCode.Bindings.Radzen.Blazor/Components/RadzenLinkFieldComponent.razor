@using Codeer.LowCode.Blazor.Components.Renderer
@using Codeer.LowCode.Blazor.Components.Dialog
@using Codeer.LowCode.Blazor.Repository.Match
@using global::Radzen
@using Codeer.LowCode.Bindings.Radzen.Blazor.Internal.Components
@inherits RadzenFieldComponentBase<LinkField, RadzenLinkFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2">@ViewOnlyValue</span>
} else {
  <div>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="2">
      <RadzenFormField Variant="Variant.Outlined" class="flex-grow-1">
        <ChildContent>
          @if (IsSelectOnly) {
            <RadzenTextBox Value="@DisplayText" Disabled="@IsDisabled" ReadOnly="true" Name="@WebElementId"/>
          } else {
            <RadzenTextBox T="string?" @bind-Value:get="@DisplayText" @bind-Value:set="RaiseOnValueChanged"
                           Disabled="@IsDisabled" class="flex-grow-1" Name="@WebElementId"/>
          }
        </ChildContent>
        <End>
          @if (HasValue) {
            <RadzenButton Icon="close" Click="Clear" Variant="Variant.Text" Size="ButtonSize.Small" />
          }
        </End>
      </RadzenFormField>
      <RadzenButton Icon="search" Click="OpenModal" Disabled="@IsDisabled" class="px-3"
                    Variant="RadzenDesign.ButtonVariant.ToVariant()" ButtonStyle="@RadzenDesign.ButtonColor.ToButtonStyle()"/>
    </RadzenStack>
    <Validator IsValid="@Field.IsValid" ErrorMessage="@Field.ErrorText" />
  </div>

  <ModalBase @bind-IsOpen="_isModalOpen" Title="検索" Size="modal-lg">
    @if (_isModalOpen) {
      <LinkTableRenderer SearchConditions="@Conditions" ItemSelected="OnItemSelected" ModuleDesign="Field.Module.Design" LinkFieldDesign="Field.Design"/>
    }
  </ModalBase>
}

@code {
  private bool _isModalOpen;
  private SearchCondition Conditions => Field.GetSearchConditionAssignedValue();

  private bool IsSelectOnly => !string.IsNullOrEmpty(Field.Design.DisplayTextVariable);
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private bool HasValue => Field.Value != null;
  private string DisplayText => Field.DisplayText;
  private string? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "Link" : DisplayText;

  private async Task OpenModal() {
    await Task.CompletedTask;
    _isModalOpen = true;
  }

  private void CloseModal() => _isModalOpen = false;

  private async Task RaiseOnValueChanged(string? value) {
    await Field.SetValueAsync(value);
  }

  private async Task OnItemSelected(Module obj) {
    CloseModal();
    await Field.SetValueAsync(obj);
  }

  private async void Clear() {
    await Field.SetValueAsync((string?)null);
  }

}