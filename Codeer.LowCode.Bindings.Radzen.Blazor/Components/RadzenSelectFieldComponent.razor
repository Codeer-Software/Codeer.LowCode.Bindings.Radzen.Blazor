@using Codeer.LowCode.Blazor.Repository.Design
@using Codeer.LowCode.Bindings.Radzen.Blazor.Internal.Components
@inherits RadzenFieldComponentBase<SelectField, RadzenSelectFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2">@(ViewOnlyValue)</span>
} else {
  <div>
    <RadzenDropDown TValue="string" @bind-Value:get="SelectedValue" @bind-Value:set="@OnChange" InputId="@WebElementId" Disabled="@IsDisabled" Name="@WebElementId"
                    Data="ItemsSource" TextProperty="@nameof(Data.Text)" ValueProperty="@nameof(Data.Value)" class="d-block" />
    <Validator IsValid="@Field.IsValid" ErrorMessage="@Field.ErrorText" />
  </div>
}

@code {
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private string? _bugFixValue;
  private string? SelectedValue
  {
    get
    {
      if (_bugFixValue != null)
      {
        //一度不具合回避用の文字列を返す
        var ret = _bugFixValue;
        _bugFixValue = null;
        StateHasChanged();
        return ret;
      }
      return Field.Value;
    }
  }

  private List<Data> ItemsSource => GetItemsSource();
  private string? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "Select" : Field.DisplayText;

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    await OnFocus();
  }

  private List<Data> GetItemsSource() {
    List<Data> emptyItems = Field.Design.EmptyCandidateType != SelectEmptyCandidateType.NotExist
      ? [new("", "")]
      : [];

    return emptyItems.Concat(Field.DisplayTextAndValue.Select(x => new Data(x.Key, x.Value))).ToList();
  }

  private async Task OnChange(string? value) {
    if (string.IsNullOrEmpty(value)) {
      value = Field.Design.EmptyCandidateType == SelectEmptyCandidateType.StringEmpty ? string.Empty : null;
    }

    await Field.SetValueAsync(value);
  }

  private async Task OnFocus()
  {
    //ここで候補を変えた後、選択文字列が消えてしまう
    //そのため一瞬候補外の文字列を設定して再度正しい値を設定するという手法を使う
    if (await Field.OnFocusAsync()) _bugFixValue = Guid.NewGuid().ToString();
  }

  private record Data(string Text, string Value);

}