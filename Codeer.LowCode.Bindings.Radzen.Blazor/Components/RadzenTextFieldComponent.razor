@using Codeer.LowCode.Bindings.Radzen.Blazor.Internal.Components
@inherits RadzenFieldComponentBase<TextField, RadzenTextFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2" style="@(WhiteSpaceStyle())">@ViewOnlyValue</span>
} else {
  if (Field.Design.IsMultiline) {
    <RadzenTextArea @bind-Value:get="@Value" @bind-Value:set="@RaiseOnValueChanged" Name="@WebElementId"
                    Disabled="@IsDisabled" ReadOnly="IsViewMode" MaxLength="@(MaxLength)" Placeholder="@Placeholder" Rows="@Rows" class="d-block w-100" />
  } else {
    <RadzenTextBox @bind-Value:get="@Value" @bind-Value:set="@RaiseOnValueChanged" Name="@WebElementId"
                   Disabled="@IsDisabled" ReadOnly="IsViewMode" MaxLength="@(MaxLength)" Placeholder="@Placeholder" class="d-block w-100" />
  }
  <Validator IsValid="@Field.IsValid" ErrorMessage="@Field.ErrorText" />
}

@code {
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private string? Placeholder => Field.Design.Placeholder;
  private int? MaxLength => Field.Design.MaxLength;
  private int Rows { get; set; }
  private string? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "text" : Field.Value;
  private string? Value => Field.Value;

  protected override void OnParametersSet() {
    base.OnParametersSet();
    Rows = Field.Design.Rows ?? 3;
  }

  private async void RaiseOnValueChanged(string? value) {
    await Field.SetValueAsync(value);
  }

  private string WhiteSpaceStyle()
    => Field.Design.IsMultiline ? "white-space: pre-line" : "";

}