@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Blazor.Repository.Match
@inherits FieldComponentBase<FileField>

<div class="mb-2">
  <label class="form-label mb-1" for="@WebElementId">FileName</label>
  <div class="d-flex">
    <RadzenTextBox @bind-Value:get="FileNameValue" @bind-Value:set="OnFileNameChanged" data-search-target="filename"/>
    <RadzenDropDown TValue="MatchComparison" @bind-Value="Field.SearchFileNameComparison" data-search-target="filenamematch">
      <RadzenDropDownItem TValue="MatchComparison" Value="Equal">Equal</RadzenDropDownItem>
      <RadzenDropDownItem TValue="MatchComparison" Value="Like">Like</RadzenDropDownItem>
    </RadzenDropDown>
  </div>
</div>

<div>
  <label class="form-label mb-1" for="@_fileSizeId">FileSize</label>
  <div class="d-flex align-items-center">
    <RadzenNumeric TValue="decimal?" @bind-Value:get="@FileSizeMoreThanValue" @bind-Value:set="@OnFileSizeMoreThanChanged"
                   class="d-block" data-search-target="min"/>
    <span class="input-group-text">ï½ž</span>
    <RadzenNumeric TValue="decimal?" @bind-Value:get="@FileSizeLessThanValue" @bind-Value:set="@OnFileSizeLessThanChanged"
                   class="d-block" data-search-target="max"/>
  </div>
</div>

@code {

  private readonly string _fileSizeId = Guid.NewGuid().ToString();

  private string? FileNameValue => Field.SearchFileName;
  private decimal? FileSizeMoreThanValue => Field.SearchFileSizeMin;
  private decimal? FileSizeLessThanValue => Field.SearchFileSizeMax;

  private async Task OnFileNameChanged(string? value) {
    await Field.SetSearchSearchFileNameAsync(value);
  }

  private async Task OnFileSizeMoreThanChanged(decimal? value) {
    await Field.SetSearchFileSizeMinAsync(value);
  }

  private async Task OnFileSizeLessThanChanged(decimal? value) {
    await Field.SetSearchFileSizeMaxAsync(value);
  }

}