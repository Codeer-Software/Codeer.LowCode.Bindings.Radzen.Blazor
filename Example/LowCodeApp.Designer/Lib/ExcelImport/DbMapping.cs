using Codeer.LowCode.Blazor.SystemSettings;

namespace LowCodeApp.Designer.Lib.ExcelImport
{
    internal class DbMapping
    {
        private static readonly Dictionary<string, string> SqliteTypeMapping = new()
        {
            {"Id", "INTEGER PRIMARY KEY AUTOINCREMENT"},
            {"Text", "TEXT"},
            {"Number", "INTEGER"},
            {"Date", "DATE"},
            {"DateTime", "DATETIME"},
            {"Time", "TIME"},
            {"Boolean", "BOOLEAN"},
            {"Link", "TEXT"},
            {"Select", "TEXT"},
            {"RadioGroup", "TEXT"}
        };

        private static readonly Dictionary<string, string> SqlserverTypeMapping = new()
        {
            {"Id", "BIGINT IDENTITY(1,1) PRIMARY KEY"},
            { "Text", "NVARCHAR(MAX)"},
            { "Number", "INT"},
            { "Date", "DATE"},
            { "DateTime", "DATETIME"},
            { "Time", "TIME"},
            { "Boolean", "BIT"},
            { "Link", "NVARCHAR(MAX)"},
            { "Select", "NVARCHAR(MAX)"},
            { "RadioGroup", "NVARCHAR(MAX)"}
        };

        private static readonly Dictionary<string, string> PostgresqlTypeMapping = new()
        {
            {"Id", "BIGSERIAL PRIMARY KEY"},
            {"Text", "TEXT"},
            {"Number", "INTEGER"},
            {"Date", "DATE"},
            {"DateTime", "TIMESTAMP"},
            {"Time", "TIME"},
            {"Boolean", "BOOLEAN"},
            {"Link", "TEXT"},
            {"Select", "TEXT"},
            {"RadioGroup", "TEXT"}
        };

        private static readonly Dictionary<string, string> OracleTypeMapping = new()
        {
            {"Id", "NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY"},
            {"Text", "VARCHAR2(4000)"},
            {"Number", "NUMBER"},
            {"Date", "DATE"},
            {"DateTime", "TIMESTAMP"},
            {"Time", "TIMESTAMP WITH LOCAL TIME ZONE"},
            {"Boolean", "NUMBER(1)"},
            {"Link", "VARCHAR2(4000)"},
            {"Select", "VARCHAR2(4000)"},
            {"RadioGroup", "VARCHAR2(4000)"}
        };

        internal static string MapToColumnType(DataSourceType dataSourceType, string fieldType, string name)
        {
            if (name.ToLower() != "id" && fieldType == "Id") fieldType = "Number";
            try
            {
                return dataSourceType switch
                {
                    DataSourceType.SQLite => SqliteTypeMapping[fieldType],
                    DataSourceType.SQLServer => SqlserverTypeMapping[fieldType],
                    DataSourceType.PostgreSQL => PostgresqlTypeMapping[fieldType],
                    DataSourceType.Oracle => OracleTypeMapping[fieldType],
                    _ => throw new Exception()
                };
            }
            catch
            {
                throw new Exception($"Database type not supported: {dataSourceType}, {fieldType}");
            }
        }
    }
}
